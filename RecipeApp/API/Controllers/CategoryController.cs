using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using RecipeApp.API.Models.Update;
using RecipeApp.Application.Interfaces;
using RecipeApp.Application.ViewModel.CategoryViewModel;

namespace RecipeApp.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CategoryController : ControllerBase
    {
        private readonly ICategoryService _categoryService;
        private readonly IMapper _mapper;

        public CategoryController(ICategoryService categoryService, IMapper mapper)
        {
            _categoryService = categoryService;
            _mapper = mapper;
        }

        [HttpGet]
        public async Task<IEnumerable<CategoryViewModel?>> GetAll()
        {
            return await _categoryService.GetAllAsync();
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<CategoryViewModel?>> GetById(Guid id)
        {
            var category = await _categoryService.GetAsync(id);

            if (category == null)
            {
                return NotFound();
            }

            return Ok(category);
        }

        [HttpPost]
        public async Task<ActionResult<CategoryViewModel>> Create(CreateCategoryViewModel createViewModel)
        {
            var createdViewModel = await _categoryService.AddAsync(createViewModel);

            // Now createdViewModel should include the Id generated by the server
            return CreatedAtAction(nameof(GetById), new { id = createdViewModel.Id }, createdViewModel);
        }


        [HttpPut("{id}")]
        public async Task<ActionResult<CategoryViewModel>> Update(Guid id, UpdateCategoryModel updateViewModel)
        {
            var category = await _categoryService.GetAsync(id);

            if (category == null)
            {
                return NotFound();
            }
            
            var mappedViewModel = _mapper.Map<UpdateCategoryViewModel>(updateViewModel);
            mappedViewModel.Id = id;
            
            var categoryViewModel =  await _categoryService.UpdateAsync(mappedViewModel);

            return Ok(categoryViewModel);
        }

        [HttpDelete("{id}")]
        public async Task<ActionResult> Delete(Guid id)
        {
            var category = await _categoryService.GetAsync(id);

            if (category == null)
            {
                return NotFound();
            }

            var mappedViewModel = _mapper.Map<CategoryViewModel>(category);
            await _categoryService.DeleteAsync(mappedViewModel);

            return NoContent();
        }
    }
}
